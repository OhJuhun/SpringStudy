plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE' //이것의 버전에 따라 라이브러리 버전 관리도 해줌.
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'org.asciidoctor.convert' version '1.5.9.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
def queryDSLVersion = '4.2.2' //version
def generated = "src/main/generated"// QueryDSL PATH

ext {
	snippetsDir = file('build/generated-snippets')
}

asciidoctor {
	backends 'html5'
	sourceDir 'src/asciidoc'						//adoc route
//	//attributes 'snippets': file('target/snippets')
	attributes 'snippets' : file(snippetsDir)	//snippets route
	inputs.dir snippetsDir
	dependsOn test
	outputDir 'src/asciidoc'
}

repositories {
	mavenCentral()
} //이 Repository에서 Library를 다운 받겠다는 설정

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-security' //사용시 자동으로 Login 페이지 생김

	compile group: 'org.hibernate', name: 'hibernate-validator', version: '6.0.7.Final'
	//Query DSL
	compile("com.querydsl:querydsl-core:${queryDSLVersion}")
	compile("com.querydsl:querydsl-jpa:${queryDSLVersion}")
	compile("com.querydsl:querydsl-apt:${queryDSLVersion}")
	annotationProcessor(
			"com.querydsl:querydsl-apt:${queryDSLVersion}:jpa",
			"org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
			"javax.annotation:javax.annotation-api"
	)

	implementation 'mysql:mysql-connector-java'
	implementation files('./build/libs/validation-api-2.0.1.Final.jar')// 이걸 쓰려면 hiberante-validator와 같이 써야한다.
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6' // query log 값 보기
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		exclude module: 'junit5'
	}
	testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.6.2")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.6.2")
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

bootRun{
	main = "com.example.demo.DemoApplication"
}

springBoot{ //gradlew build
	mainClassName = 'com.example.DemoApplication'
}

bootJar { //gradlew build
	mainClassName = 'com.example.demo.DemoApplication'
	manifest {
		attributes 'Start-Class': 'com.example.demo.DemoApplication'
	}
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}

}
 //??
sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
	file(generated).deleteDir()
}
 //추가 설정
////implementationQuerydsl{
////	options.annotationProcessorPath = configurations.querydsl
//}

configurations {
	querydsl.extendsFrom compileClasspath
}